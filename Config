#!/bin/sh
#
# Configuration script for X4
#
# Basic construct created by Andromeda
#
#######################################################

HOMEDIR="${HOME}"
ISNUM="^[1-9][0-9]*$"
YNREG="^[yn]$"

# Variables we need to send to configure
INSTALLDIR="${HOME}/x4"
MAXCONNS=4096
DEBUGMODE=n
UPLINK="y"

# Were any of the values changed?
CHG_INSTALLDIR="n"
CHG_MAXCONNS="n"
CHG_DEBUGMODE="n"
CHG_UPLINK="n"

MAXCONNS=`ulimit -Hn`
if test x"$MAXCONNS" = xunlimited; then
    MAXCONNS=`ulimit -Sn`
fi

exists() {
    if [ -f $1 -o -d $1 -o -p $1 -o -c $1 -o -b $1 ] ; then
        return 0
    else
        return 1
    fi
}

load_cache() {
    if [ -f ./config.cache -a -r ./config.cache -a ] ; then
        echo "Using data from config.cache."
        echo ""
        ./config.cache
        CAN_INSTALL = "yes"
    else
        CAN_INSTALL = "no"
    fi
}

build_install() {
    B_INSTALL_DIR=""
    B_MAXCONNS=""
    B_DEBUGMODE=""
    B_INCLUDE=""
    B_LIBS=""

    if [ "$INSTALLDIR" != "" ] ; then
        B_INSTALL_DIR="--prefix=$INSTALLDIR"
    fi

    if [ "$MAXCONNS" != "" ] ; then
        B_MAXCONNS="--with-maxcon=$MAXCONNS"
    fi

    if [ "$DEBUGMODE" != "n" ] ; then
        B_DEBUGMODE="--enable-debug"
    fi
}

ok=0
clear
echo ""

####
echo "What directory should we use for X4?"
echo ""
echo "This is your runtime directory, where your configuration,"
echo "database, and everything else will be stored."

while [ "${ok}" -eq 0 ] ; do
    echo "[${INSTALLDIR}] "
    if read INPUT ; then : ; else echo "" ; exit 1 ; fi
    if [ ! "${INPUT}" ] ; then
        break
    fi
    if [ "$INPUT" != "$INSTALLDIR" ] ; then
        CHG_INSTALLDIR="y"
    fi
    /* How do we validate the path here? if valid set ok=1 and INSTALLDIR=$INPUT */
done

ok=0
echo ""

####
echo "How many connections should we allow?"
echo ""
echo "By default, P10 allows 4096 clients, which is the physical maximum"
echo "possible. Anything higher than 4096 will automatically be set to"
echo "this. If your system does not have an ample supply of resources"
echo "we recommend you lower this to improve performance."

while [ "${ok}" -eq 0 ] ; do
    echo "[${MAXCONNS}] "
    if read INPUT ; then : ; else echo "" ; exit 1 ; fi
    if [ ! "${INPUT}" ] ; then
        break
    fi

    if [ "${INPUT}" ] ; then
        echo "$INPUT" | grep -q "$ISNUM"
        if [ $? -ne 0 ] ; then
            echo "Invalid input. Max connections must be a valid number"
            continue
        fi
        if [ "$INPUT" -lt 100 ] ; then
            echo "Invalid input. Max connections must be above 100"
            continue
        fi
        if [ "$INPUT" -gt "$MAXCONNS" ] ; then
            echo "Invalid input. Max connections must be below $MAXCONNS"
            continue
        fi
        if [ "$INPUT" != "$MAXCONNS" ] ; then
            CHG_MAXCONNS="y"
            MAXCONNS=$INPUT
        fi
        break
    fi
done

ok=0
echo ""

####
echo "Should we enable debug code in X4?"
echo ""
echo "This will cause X4 to output all of it's runtime data in real time via"
echo "STDOUT. This is really just for developers, so unless you're trying to"
echo "work out a bug, you really shouldn't use this."

while [ "${ok}" -eq 0 ] ; do
    echo "[n] "
    if read INPUT ; then : ; else echo "" ; exit 1 ; fi
    if [ ! "${INPUT}" ] ; then
        INPUT=$DEBUGMODE
        break
    fi

    if [ "${INPUT}" ] ; then
        echo "$INPUT" | grep -iq "$YNREG"
        if [ $? -ne 0 ] ; then
            echo "Invalid input. Must be yes (y) or no (n)."
            continue
        fi
        if [ \("$INPUT" == "y"\) -o \("$INPUT" == "yes"\) ] ; then
            continue
        fi
        if [ \("$INPUT" == "n"\) -o \("$INPUT" == "no"\) ] ; then
            continue
        fi
        if [ "$INPUT" != "$DEBUGMODE" ] ; then
            CHG_DEBUGMODE="y"
            DEBUGMODE="y"
        fi
        break
    fi
done

ok=0
echo ""

####
echo "Should we enable the uplink to evilnet?"
echo ""
echo "The uplink will allow the developers to track how many networks"
echo "run X4 and collect anonymous statistical data as well as notify"
echo "you when a new version becomes available."

while [ "${ok}" -eq 0 ] ; do
    echo "[y] "
    if read INPUT ; then : ; else echo "" ; exit 1 ; fi
    if [ ! "${INPUT}" ] ; then
        INPUT=$UPLINK
        break
    fi

    if [ "${INPUT}" ] ; then
        echo "$INPUT" | grep -iq "$YNREG"
        if [ $? -ne 0 ] ; then
            echo "Invalid input. Must be yes (y) or no (n)."
            continue
        fi
        if [ \("$INPUT" == "y"\) -o \("$INPUT" == "yes"\) ] ; then
            continue
        fi
        if [ \("$INPUT" == "n"\) -o \("$INPUT" == "no"\) ] ; then
            continue
        fi
        if [ "$INPUT" != "$UPLINK" ] ; then
            CHG_UPLINK="y"
            UPLINK="n"
        fi
        break
    fi
done

####
export B_INSTALLDIR $INPUT
echo ""

####

echo "Preparing to install..."
cat <<EOT >./config.cache
INSTALLDIR = "$B_INSTALL_DIR
EOT
echo ""
echo "Install Directory: ${INSTALLDIR} (Changed: ${CHG_INSTALLDIR})"
echo "Max Connections: ${MAXCONNS} (Changed: ${CHG_MAXCONNS})"
echo "Debug Mode: ${DEBUGMODE} (Changed: ${CHG_DEBUGMODE})"
echo "Uplink: ${UPLINK} (Changed: ${CHG_UPLINK})"
echo ""
echo "Configure stage complete. Please proceed with make to continue your installation."

build_install
